{"ast":null,"code":"/* tslint:disable */\n\n/* eslint-disable */\nimport { HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\n/**\r\n * Custom parameter codec to correctly handle the plus sign in parameter\r\n * values. See https://github.com/angular/angular/issues/18261\r\n */\n\nclass ParameterCodec {\n  encodeKey(key) {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value) {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n\n}\n\nconst ParameterCodecInstance = new ParameterCodec();\n/**\r\n * Base class for a parameter\r\n */\n\nclass Parameter {\n  constructor(name, value, options, defaultStyle, defaultExplode) {\n    this.name = name;\n    this.value = value;\n    this.options = options;\n    this.options = options || {};\n\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value, separator = ',') {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array = [];\n\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n\n}\n/**\r\n * A parameter in the operation path\r\n */\n\n\nclass PathParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path) {\n    let value = this.value;\n\n    if (value === null || value === undefined) {\n      value = '';\n    }\n\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true;\n        }\n      }\n    }\n\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator)); // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  } // @ts-ignore\n\n\n  serializeValue(value, separator = ',') {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace('%3D', '=');\n    result = result.replace('%3B', ';');\n    result = result.replace('%2C', ',');\n    return result;\n  }\n\n}\n/**\r\n * A parameter in the query\r\n */\n\n\nclass QueryParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params) {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited' ? ' ' : this.options.style === 'pipeDelimited' ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n\n    return params;\n  }\n\n}\n/**\r\n * A parameter in the HTTP request header\r\n */\n\n\nclass HeaderParameter extends Parameter {\n  constructor(name, value, options) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers) {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n\n    return headers;\n  }\n\n}\n/**\r\n * Helper to build http requests from parameters\r\n */\n\n\nexport class RequestBuilder {\n  constructor(rootUrl, operationPath, method) {\n    this.rootUrl = rootUrl;\n    this.operationPath = operationPath;\n    this.method = method;\n    this._path = new Map();\n    this._query = new Map();\n    this._header = new Map();\n  }\n  /**\r\n   * Sets a path parameter\r\n   */\n\n\n  path(name, value, options) {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n  /**\r\n   * Sets a query parameter\r\n   */\n\n\n  query(name, value, options) {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n  /**\r\n   * Sets a header parameter\r\n   */\n\n\n  header(name, value, options) {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n  /**\r\n   * Sets the body content, along with the content type\r\n   */\n\n\n  body(value, contentType = 'application/json') {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs = [];\n\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  formDataValue(value) {\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    if (value instanceof Blob) {\n      return value;\n    }\n\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n\n    return String(value);\n  }\n  /**\r\n   * Builds the request with the current set parameters\r\n   */\n\n\n  build(options) {\n    options = options || {}; // Path parameters\n\n    let path = this.operationPath;\n\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n\n    const url = this.rootUrl + path; // Query parameters\n\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    } // Header parameters\n\n\n    let httpHeaders = new HttpHeaders();\n\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    } // Request content headers\n\n\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    } // Perform the request\n\n\n    return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}