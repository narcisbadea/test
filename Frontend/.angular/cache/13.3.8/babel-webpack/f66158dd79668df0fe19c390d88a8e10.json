{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let AdminItemsService = /*#__PURE__*/(() => {\n  class AdminItemsService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsUnlisteditemsNrGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsUnlisteditemsNrGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsUnlisteditemsNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsUnlisteditemsNrGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsUnlisteditemsNrGet$Plain(params) {\n      return this.apiAdminItemsUnlisteditemsNrGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsUnlisteditemsNrGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsUnlisteditemsNrGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsUnlisteditemsNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsUnlisteditemsNrGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsUnlisteditemsNrGet$Json(params) {\n      return this.apiAdminItemsUnlisteditemsNrGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsListeditemsNrGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsListeditemsNrGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsListeditemsNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsListeditemsNrGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsListeditemsNrGet$Plain(params) {\n      return this.apiAdminItemsListeditemsNrGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsListeditemsNrGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsListeditemsNrGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsListeditemsNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsListeditemsNrGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsListeditemsNrGet$Json(params) {\n      return this.apiAdminItemsListeditemsNrGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsIdGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'blob',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsIdGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdGet$Plain(params) {\n      return this.apiAdminItemsIdGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsIdGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'blob',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsIdGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdGet$Json(params) {\n      return this.apiAdminItemsIdGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsIdPut()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdPut$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsIdPutPath, 'put');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsIdPut$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdPut(params) {\n      return this.apiAdminItemsIdPut$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsIdDelete()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdDelete$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsIdDeletePath, 'delete');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsIdDelete$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsIdDelete(params) {\n      return this.apiAdminItemsIdDelete$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsNumbersOfItemsGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsNumbersOfItemsGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsNumbersOfItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsNumbersOfItemsGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsNumbersOfItemsGet$Plain(params) {\n      return this.apiAdminItemsNumbersOfItemsGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsNumbersOfItemsGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsNumbersOfItemsGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsNumbersOfItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsNumbersOfItemsGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsNumbersOfItemsGet$Json(params) {\n      return this.apiAdminItemsNumbersOfItemsGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsPost$Plain()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAdminItemsPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAdminItemsPost$Plain(params) {\n      return this.apiAdminItemsPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsPost$Json()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAdminItemsPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAdminItemsPost$Json(params) {\n      return this.apiAdminItemsPost$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminItemsSoldbyadminIdDelete()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsSoldbyadminIdDelete$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminItemsService.ApiAdminItemsSoldbyadminIdDeletePath, 'delete');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminItemsSoldbyadminIdDelete$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminItemsSoldbyadminIdDelete(params) {\n      return this.apiAdminItemsSoldbyadminIdDelete$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation apiAdminItemsUnlisteditemsNrGet\r\n   */\n  AdminItemsService.ApiAdminItemsUnlisteditemsNrGetPath = '/api/AdminItems/unlisteditems/{nr}';\n  /**\r\n   * Path part for operation apiAdminItemsListeditemsNrGet\r\n   */\n\n  AdminItemsService.ApiAdminItemsListeditemsNrGetPath = '/api/AdminItems/listeditems/{nr}';\n  /**\r\n   * Path part for operation apiAdminItemsIdGet\r\n   */\n\n  AdminItemsService.ApiAdminItemsIdGetPath = '/api/AdminItems/{id}';\n  /**\r\n   * Path part for operation apiAdminItemsIdPut\r\n   */\n\n  AdminItemsService.ApiAdminItemsIdPutPath = '/api/AdminItems/{id}';\n  /**\r\n   * Path part for operation apiAdminItemsIdDelete\r\n   */\n\n  AdminItemsService.ApiAdminItemsIdDeletePath = '/api/AdminItems/{id}';\n  /**\r\n   * Path part for operation apiAdminItemsNumbersOfItemsGet\r\n   */\n\n  AdminItemsService.ApiAdminItemsNumbersOfItemsGetPath = '/api/AdminItems/numbers-of-items';\n  /**\r\n   * Path part for operation apiAdminItemsPost\r\n   */\n\n  AdminItemsService.ApiAdminItemsPostPath = '/api/AdminItems';\n  /**\r\n   * Path part for operation apiAdminItemsSoldbyadminIdDelete\r\n   */\n\n  AdminItemsService.ApiAdminItemsSoldbyadminIdDeletePath = '/api/AdminItems/soldbyadmin/{id}';\n\n  AdminItemsService.ɵfac = function AdminItemsService_Factory(t) {\n    return new (t || AdminItemsService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AdminItemsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminItemsService,\n    factory: AdminItemsService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminItemsService;\n})();","map":null,"metadata":{},"sourceType":"module"}