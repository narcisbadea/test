{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let PicturesService = /*#__PURE__*/(() => {\n  class PicturesService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesIdGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesIdGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesIdGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesIdGet$Plain(params) {\n      return this.apiPicturesIdGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesIdGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesIdGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesIdGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesIdGet$Json(params) {\n      return this.apiPicturesIdGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesShowIdGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesShowIdGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesShowIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'blob',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesShowIdGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesShowIdGet$Plain(params) {\n      return this.apiPicturesShowIdGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesShowIdGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesShowIdGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesShowIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'blob',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesShowIdGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiPicturesShowIdGet$Json(params) {\n      return this.apiPicturesShowIdGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesPost$Plain()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'multipart/form-data');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesPost$Plain(params) {\n      return this.apiPicturesPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesPost$Json()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'multipart/form-data');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesPost$Json(params) {\n      return this.apiPicturesPost$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesListPost$Plain()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesListPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesListPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'multipart/form-data');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesListPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesListPost$Plain(params) {\n      return this.apiPicturesListPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiPicturesListPost$Json()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesListPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PicturesService.ApiPicturesListPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'multipart/form-data');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiPicturesListPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\r\n     */\n\n\n    apiPicturesListPost$Json(params) {\n      return this.apiPicturesListPost$Json$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation apiPicturesIdGet\r\n   */\n  PicturesService.ApiPicturesIdGetPath = '/api/Pictures/{id}';\n  /**\r\n   * Path part for operation apiPicturesShowIdGet\r\n   */\n\n  PicturesService.ApiPicturesShowIdGetPath = '/api/Pictures/show/{id}';\n  /**\r\n   * Path part for operation apiPicturesPost\r\n   */\n\n  PicturesService.ApiPicturesPostPath = '/api/Pictures';\n  /**\r\n   * Path part for operation apiPicturesListPost\r\n   */\n\n  PicturesService.ApiPicturesListPostPath = '/api/Pictures/list';\n\n  PicturesService.ɵfac = function PicturesService_Factory(t) {\n    return new (t || PicturesService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  PicturesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PicturesService,\n    factory: PicturesService.ɵfac,\n    providedIn: 'root'\n  });\n  return PicturesService;\n})();","map":null,"metadata":{},"sourceType":"module"}