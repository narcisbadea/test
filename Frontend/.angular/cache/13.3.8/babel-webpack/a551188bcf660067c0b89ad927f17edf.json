{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let ClientItemService = /*#__PURE__*/(() => {\n  class ClientItemService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemsGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemsGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsGet$Plain(params) {\n      return this.apiClientItemMyItemsGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemsGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemsGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsGet$Json(params) {\n      return this.apiClientItemMyItemsGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemsPageGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsPageGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemsPageGetPath, 'get');\n\n      if (params) {\n        rb.query('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemsPageGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsPageGet$Plain(params) {\n      return this.apiClientItemMyItemsPageGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemsPageGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsPageGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemsPageGetPath, 'get');\n\n      if (params) {\n        rb.query('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemsPageGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemsPageGet$Json(params) {\n      return this.apiClientItemMyItemsPageGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemaNumberGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemaNumberGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemaNumberGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemaNumberGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemaNumberGet$Plain(params) {\n      return this.apiClientItemMyItemaNumberGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemMyItemaNumberGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemaNumberGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemMyItemaNumberGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemMyItemaNumberGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemMyItemaNumberGet$Json(params) {\n      return this.apiClientItemMyItemaNumberGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemItemStateGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemItemStateGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemItemStateGetPath, 'get');\n\n      if (params) {\n        rb.query('itemId', params.itemId, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemItemStateGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemItemStateGet$Plain(params) {\n      return this.apiClientItemItemStateGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemItemStateGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemItemStateGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemItemStateGetPath, 'get');\n\n      if (params) {\n        rb.query('itemId', params.itemId, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemItemStateGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemItemStateGet$Json(params) {\n      return this.apiClientItemItemStateGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetAllGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetAllGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetAllGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetAllGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetAllGet$Plain(params) {\n      return this.apiClientItemGetAllGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetAllGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetAllGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetAllGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetAllGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetAllGet$Json(params) {\n      return this.apiClientItemGetAllGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetItemByPageNrGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByPageNrGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetItemByPageNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetItemByPageNrGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByPageNrGet$Plain(params) {\n      return this.apiClientItemGetItemByPageNrGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetItemByPageNrGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByPageNrGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetItemByPageNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetItemByPageNrGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByPageNrGet$Json(params) {\n      return this.apiClientItemGetItemByPageNrGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemNumberOfItemsGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemNumberOfItemsGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemNumberOfItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemNumberOfItemsGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemNumberOfItemsGet$Plain(params) {\n      return this.apiClientItemNumberOfItemsGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemNumberOfItemsGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemNumberOfItemsGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemNumberOfItemsGetPath, 'get');\n\n      if (params) {}\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: parseFloat(String(r.body))\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemNumberOfItemsGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemNumberOfItemsGet$Json(params) {\n      return this.apiClientItemNumberOfItemsGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetItemByIdIdGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByIdIdGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetItemByIdIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetItemByIdIdGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByIdIdGet$Plain(params) {\n      return this.apiClientItemGetItemByIdIdGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemGetItemByIdIdGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByIdIdGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemGetItemByIdIdGetPath, 'get');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemGetItemByIdIdGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemGetItemByIdIdGet$Json(params) {\n      return this.apiClientItemGetItemByIdIdGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemAddItemPost$Plain()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiClientItemAddItemPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemAddItemPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemAddItemPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiClientItemAddItemPost$Plain(params) {\n      return this.apiClientItemAddItemPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemAddItemPost$Json()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiClientItemAddItemPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemAddItemPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemAddItemPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiClientItemAddItemPost$Json(params) {\n      return this.apiClientItemAddItemPost$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiClientItemIdDelete()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemIdDelete$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, ClientItemService.ApiClientItemIdDeletePath, 'delete');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiClientItemIdDelete$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiClientItemIdDelete(params) {\n      return this.apiClientItemIdDelete$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation apiClientItemMyItemsGet\r\n   */\n  ClientItemService.ApiClientItemMyItemsGetPath = '/api/ClientItem/my-items';\n  /**\r\n   * Path part for operation apiClientItemMyItemsPageGet\r\n   */\n\n  ClientItemService.ApiClientItemMyItemsPageGetPath = '/api/ClientItem/my-items/page';\n  /**\r\n   * Path part for operation apiClientItemMyItemaNumberGet\r\n   */\n\n  ClientItemService.ApiClientItemMyItemaNumberGetPath = '/api/ClientItem/my-itema/number';\n  /**\r\n   * Path part for operation apiClientItemItemStateGet\r\n   */\n\n  ClientItemService.ApiClientItemItemStateGetPath = '/api/ClientItem/item-state';\n  /**\r\n   * Path part for operation apiClientItemGetAllGet\r\n   */\n\n  ClientItemService.ApiClientItemGetAllGetPath = '/api/ClientItem/get-all';\n  /**\r\n   * Path part for operation apiClientItemGetItemByPageNrGet\r\n   */\n\n  ClientItemService.ApiClientItemGetItemByPageNrGetPath = '/api/ClientItem/get-item-by-page/{nr}';\n  /**\r\n   * Path part for operation apiClientItemNumberOfItemsGet\r\n   */\n\n  ClientItemService.ApiClientItemNumberOfItemsGetPath = '/api/ClientItem/number-of-items';\n  /**\r\n   * Path part for operation apiClientItemGetItemByIdIdGet\r\n   */\n\n  ClientItemService.ApiClientItemGetItemByIdIdGetPath = '/api/ClientItem/get-item-by-id/{id}';\n  /**\r\n   * Path part for operation apiClientItemAddItemPost\r\n   */\n\n  ClientItemService.ApiClientItemAddItemPostPath = '/api/ClientItem/add-item';\n  /**\r\n   * Path part for operation apiClientItemIdDelete\r\n   */\n\n  ClientItemService.ApiClientItemIdDeletePath = '/api/ClientItem/{id}';\n\n  ClientItemService.ɵfac = function ClientItemService_Factory(t) {\n    return new (t || ClientItemService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  ClientItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientItemService,\n    factory: ClientItemService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClientItemService;\n})();","map":null,"metadata":{},"sourceType":"module"}