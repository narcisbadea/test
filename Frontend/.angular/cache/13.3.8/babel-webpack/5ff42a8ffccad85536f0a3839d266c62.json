{"ast":null,"code":"import { Pipe, Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ChangeDetectorRef, ContentChildren, forwardRef, Directive, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CommonModule } from '@angular/common';\nimport { HttpEventType, HttpClient, HttpHeaders, HttpParams, HttpClientModule } from '@angular/common/http';\nimport { BehaviorSubject, ReplaySubject, Subscription, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/bytes/bytes.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/material/card';\nimport * as ɵngcc4 from '@angular/material/progress-bar';\nimport * as ɵngcc5 from '@angular/material/button';\nimport * as ɵngcc6 from '@angular/material/icon';\n\nfunction MatFileUploadComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"mat-card\")(2, \"span\", 1);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵpipe(4, \"bytes\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 2);\n    ɵngcc0.ɵɵelement(6, \"mat-progress-bar\", 3);\n    ɵngcc0.ɵɵelementStart(7, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function MatFileUploadComponent_ng_container_0_Template_button_click_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.upload();\n    });\n    ɵngcc0.ɵɵpipe(8, \"async\");\n    ɵngcc0.ɵɵelementStart(9, \"mat-icon\");\n    ɵngcc0.ɵɵtext(10, \"file_upload\");\n    ɵngcc0.ɵɵelementEnd()();\n    ɵngcc0.ɵɵelementStart(11, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function MatFileUploadComponent_ng_container_0_Template_button_click_11_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.remove();\n    });\n    ɵngcc0.ɵɵelementStart(12, \"mat-icon\");\n    ɵngcc0.ɵɵtext(13, \"cancel\");\n    ɵngcc0.ɵɵelementEnd()()();\n    ɵngcc0.ɵɵelementStart(14, \"span\", 1);\n    ɵngcc0.ɵɵtext(15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(16, \"span\");\n    ɵngcc0.ɵɵtext(17);\n    ɵngcc0.ɵɵpipe(18, \"bytes\");\n    ɵngcc0.ɵɵpipe(19, \"bytes\");\n    ɵngcc0.ɵɵelementEnd()();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const uploadProgress_r1 = ctx.ngIf;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate2(\"\", ctx_r0.file.name, \"(\", ɵngcc0.ɵɵpipeBind1(4, 9, ctx_r0.file.size), \")\");\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"value\", uploadProgress_r1.progressPercentage);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", ɵngcc0.ɵɵpipeBind1(8, 11, ctx_r0.uploadInProgress$));\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.fileUploadAriaLabel);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.cancelAriaLabel);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", uploadProgress_r1.progressPercentage, \"%\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ɵngcc0.ɵɵpipeBind1(18, 13, uploadProgress_r1.loaded), \" of \", ɵngcc0.ɵɵpipeBind1(19, 15, uploadProgress_r1.total), \"\");\n  }\n}\n\nfunction MatFileUploadQueueComponent_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function MatFileUploadQueueComponent_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.uploadAll();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r0.uploadAllColor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.uploadAllLabel, \"\\n\");\n  }\n}\n\nfunction MatFileUploadQueueComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function MatFileUploadQueueComponent_button_3_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.removeAll();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.removeAllColor);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.removeAllLabel, \"\\n\");\n  }\n}\n\nconst _c0 = [\"*\"];\nlet BytesPipe = /*#__PURE__*/(() => {\n  class BytesPipe {\n    /**\n     * @param {?} bytes\n     * @return {?}\n     */\n    transform(bytes) {\n      if (isNaN(parseFloat('' + bytes)) || !isFinite(bytes)) return '-';\n      if (bytes <= 0) return '0';\n      /** @type {?} */\n\n      var units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n      /** @type {?} */\n\n      var number = Math.floor(Math.log(bytes) / Math.log(1024));\n      return (bytes / Math.pow(1024, Math.floor(number))).toFixed(1) + ' ' + units[number];\n    }\n\n  }\n\n  BytesPipe.ɵfac = function BytesPipe_Factory(t) {\n    return new (t || BytesPipe)();\n  };\n\n  BytesPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"bytes\",\n    type: BytesPipe,\n    pure: true\n  });\n  return BytesPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/mat-file-upload-queue/mat-file-upload-queue.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatFileUploadQueueService = /*#__PURE__*/(() => {\n  class MatFileUploadQueueService {\n    constructor() {\n      this.inputValueSubject = new BehaviorSubject(null);\n      this.inputValue$ = this.inputValueSubject.asObservable();\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n\n    initialize(input) {\n      this.inputValueSubject.next(input);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getInputValue() {\n      return this.inputValueSubject.getValue();\n    }\n\n  }\n\n  MatFileUploadQueueService.ɵfac = function MatFileUploadQueueService_Factory(t) {\n    return new (t || MatFileUploadQueueService)();\n  };\n\n  MatFileUploadQueueService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatFileUploadQueueService,\n    factory: MatFileUploadQueueService.ɵfac\n  });\n  return MatFileUploadQueueService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatFileUploadQueueService.prototype.inputValueSubject;\n  /** @type {?} */\n\n  MatFileUploadQueueService.prototype.inputValue$;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/mat-file-upload/mat-file-upload.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatFileUploadComponent = /*#__PURE__*/(() => {\n  class MatFileUploadComponent {\n    /**\n     * @param {?} HttpClient\n     * @param {?} matFileUploadQueueService\n     */\n    constructor(HttpClient, matFileUploadQueueService) {\n      this.HttpClient = HttpClient;\n      this.matFileUploadQueueService = matFileUploadQueueService;\n      this.uploadProgressSubject = new ReplaySubject();\n      this.uploadProgress$ = this.uploadProgressSubject.asObservable();\n      this.uploadInProgressSubject = new BehaviorSubject(false);\n      this.uploadInProgress$ = this.uploadInProgressSubject.asObservable();\n      this.subs = new Subscription();\n      this.fileUploadAriaLabel = \"File Upload\";\n      this.cancelAriaLabel = \"Cancel File Upload\";\n      /**\n       * Output\n       */\n\n      this.removeEvent = new EventEmitter();\n      this.onUpload = new EventEmitter();\n      /** @type {?} */\n\n      const queueInput = this.matFileUploadQueueService.getInputValue();\n\n      if (queueInput) {\n        this.httpUrl = this.httpUrl || queueInput.httpUrl;\n        this.httpRequestHeaders = this.httpRequestHeaders || queueInput.httpRequestHeaders;\n        this.httpRequestParams = this.httpRequestParams || queueInput.httpRequestParams;\n        this.fileAlias = this.fileAlias || queueInput.fileAlias;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get file() {\n      return this._file;\n    }\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n\n\n    set file(file) {\n      this._file = file;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n\n    set id(id) {\n      this._id = id;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get id() {\n      return this._id;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.uploadProgressSubject.next({\n        progressPercentage: 0,\n        loaded: 0,\n        total: this._file.size\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    upload() {\n      this.uploadInProgressSubject.next(true); // How to set the alias?\n\n      /** @type {?} */\n\n      let formData = new FormData();\n      formData.set(this.fileAlias, this._file, this._file.name);\n      this.subs.add(this.HttpClient.post(this.httpUrl, formData, {\n        headers: this.httpRequestHeaders,\n        observe: \"events\",\n        params: this.httpRequestParams,\n        reportProgress: true,\n        responseType: \"json\"\n      }).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgressSubject.next({\n            progressPercentage: Math.floor(event.loaded * 100 / event.total),\n            loaded: event.loaded,\n            total: event.total\n          });\n        }\n\n        this.onUpload.emit({\n          file: this._file,\n          event: event\n        });\n      },\n      /**\n      * @param {?} error\n      * @return {?}\n      */\n      error => {\n        if (this.fileUploadSubscription) {\n          this.fileUploadSubscription.unsubscribe();\n        }\n\n        this.uploadInProgressSubject.next(false);\n        this.onUpload.emit({\n          file: this._file,\n          event: event\n        });\n      },\n      /**\n      * @return {?}\n      */\n      () => this.uploadInProgressSubject.next(false)));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    remove() {\n      this.subs.unsubscribe();\n      this.removeEvent.emit(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.subs.unsubscribe();\n    }\n\n  }\n\n  MatFileUploadComponent.ɵfac = function MatFileUploadComponent_Factory(t) {\n    return new (t || MatFileUploadComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient), ɵngcc0.ɵɵdirectiveInject(MatFileUploadQueueService));\n  };\n\n  MatFileUploadComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatFileUploadComponent,\n    selectors: [[\"mat-file-upload\"]],\n    inputs: {\n      fileUploadAriaLabel: \"fileUploadAriaLabel\",\n      cancelAriaLabel: \"cancelAriaLabel\",\n      httpUrl: \"httpUrl\",\n      httpRequestHeaders: \"httpRequestHeaders\",\n      httpRequestParams: \"httpRequestParams\",\n      fileAlias: \"fileAlias\",\n      file: \"file\",\n      id: \"id\"\n    },\n    outputs: {\n      removeEvent: \"removeEvent\",\n      onUpload: \"onUpload\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"file-summary\"], [1, \"upload-progress\"], [3, \"value\"], [\"mat-icon-button\", \"\", 3, \"disabled\", \"click\"], [\"mat-icon-button\", \"\", 3, \"click\"]],\n    template: function MatFileUploadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatFileUploadComponent_ng_container_0_Template, 20, 17, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.uploadProgress$));\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc3.MatCard, ɵngcc4.MatProgressBar, ɵngcc5.MatButton, ɵngcc6.MatIcon],\n    pipes: [ɵngcc2.AsyncPipe, BytesPipe],\n    styles: [\".file-summary[_ngcontent-%COMP%]{font-size:.85rem}.upload-progress[_ngcontent-%COMP%]{display:flex;align-content:center;align-items:center;height:10px}.upload-progress[_ngcontent-%COMP%]     .mat-progress-bar .mat-progress-bar-element{transition:none}\"],\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatFileUploadComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatFileUploadComponent.prototype.uploadProgressSubject;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.uploadProgress$;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype.uploadInProgressSubject;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.uploadInProgress$;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.subs;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.httpUrl;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.httpRequestHeaders;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.httpRequestParams;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.fileAlias;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype._file;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype._id;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.fileUploadAriaLabel;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.cancelAriaLabel;\n  /**\n   * Output\n   * @type {?}\n   */\n\n  MatFileUploadComponent.prototype.removeEvent;\n  /** @type {?} */\n\n  MatFileUploadComponent.prototype.onUpload;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype.fileUploadSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype.HttpClient;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadComponent.prototype.matFileUploadQueueService;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/mat-file-upload-queue/mat-file-upload-queue.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatFileUploadQueueComponent = /*#__PURE__*/(() => {\n  class MatFileUploadQueueComponent {\n    /**\n     * @param {?} matFileUploadQueueService\n     * @param {?} changeDetectorRef\n     */\n    constructor(matFileUploadQueueService, changeDetectorRef) {\n      this.matFileUploadQueueService = matFileUploadQueueService;\n      this.changeDetectorRef = changeDetectorRef;\n      this.files = [];\n      this.httpRequestHeaders = new HttpHeaders();\n      this.httpRequestParams = new HttpParams();\n      this.fileAlias = \"file\";\n      this.uploadAllColor = \"primary\";\n      this.uploadAllLabel = \"Upload All\";\n      this.removeAllColor = \"primary\";\n      this.removeAllLabel = \"Remove All\";\n    }\n    /**\n     * Combined stream of all of the file upload remove change events.\n     * @return {?}\n     */\n\n\n    get fileUploadRemoveEvents() {\n      return merge(...this.fileUploads.map(\n      /**\n      * @param {?} fileUpload\n      * @return {?}\n      */\n      fileUpload => fileUpload.removeEvent));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      this.matFileUploadQueueService.initialize({\n        httpUrl: changes[\"httpUrl\"] ? changes[\"httpUrl\"].currentValue : undefined,\n        httpRequestHeaders: changes[\"httpRequestHeaders\"] ? changes[\"httpRequestHeaders\"].currentValue : undefined,\n        httpRequestParams: changes[\"httpRequestParams\"] ? changes[\"httpRequestParams\"].currentValue : undefined,\n        fileAlias: changes[\"fileAlias\"] ? changes[\"fileAlias\"].currentValue : undefined\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      // When the list changes, re-subscribe\n      this._changeSubscription = this.fileUploads.changes.pipe(startWith(null)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        if (this._fileRemoveSubscription) {\n          this._fileRemoveSubscription.unsubscribe();\n        }\n\n        this._listenTofileRemoved();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _listenTofileRemoved() {\n      this._fileRemoveSubscription = this.fileUploadRemoveEvents.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this.files.splice(event.id, 1);\n        this.changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n\n\n    add(file) {\n      this.files.push(file);\n      this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    uploadAll() {\n      this.fileUploads.forEach(\n      /**\n      * @param {?} fileUpload\n      * @return {?}\n      */\n      fileUpload => {\n        fileUpload.upload();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    removeAll() {\n      this.files.splice(0, this.files.length);\n      this.changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._changeSubscription) this._changeSubscription.unsubscribe();\n      if (this._fileRemoveSubscription) this._fileRemoveSubscription.unsubscribe();\n\n      if (this.files) {\n        this.removeAll();\n      }\n    }\n\n  }\n\n  MatFileUploadQueueComponent.ɵfac = function MatFileUploadQueueComponent_Factory(t) {\n    return new (t || MatFileUploadQueueComponent)(ɵngcc0.ɵɵdirectiveInject(MatFileUploadQueueService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatFileUploadQueueComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatFileUploadQueueComponent,\n    selectors: [[\"mat-file-upload-queue\"]],\n    contentQueries: function MatFileUploadQueueComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatFileUploadComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileUploads = _t);\n      }\n    },\n    inputs: {\n      httpRequestHeaders: \"httpRequestHeaders\",\n      httpRequestParams: \"httpRequestParams\",\n      fileAlias: \"fileAlias\",\n      uploadAllColor: \"uploadAllColor\",\n      uploadAllLabel: \"uploadAllLabel\",\n      removeAllColor: \"removeAllColor\",\n      removeAllLabel: \"removeAllLabel\",\n      httpUrl: \"httpUrl\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MatFileUploadQueueService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 2,\n    consts: [[\"mat-raised-button\", \"\", 3, \"color\", \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", 3, \"color\", \"click\"]],\n    template: function MatFileUploadQueueComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"br\");\n        ɵngcc0.ɵɵtemplate(2, MatFileUploadQueueComponent_button_2_Template, 2, 2, \"button\", 0);\n        ɵngcc0.ɵɵtemplate(3, MatFileUploadQueueComponent_button_3_Template, 2, 2, \"button\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.files.length > 0);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.files.length > 0);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc5.MatButton],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatFileUploadQueueComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatFileUploadQueueComponent.prototype.fileUploads;\n  /**\n   * Subscription to remove changes in files.\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadQueueComponent.prototype._fileRemoveSubscription;\n  /**\n   * Subscription to changes in the files.\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadQueueComponent.prototype._changeSubscription;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.files;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.httpUrl;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.httpRequestHeaders;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.httpRequestParams;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.fileAlias;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.uploadAllColor;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.uploadAllLabel;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.removeAllColor;\n  /** @type {?} */\n\n  MatFileUploadQueueComponent.prototype.removeAllLabel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadQueueComponent.prototype.matFileUploadQueueService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatFileUploadQueueComponent.prototype.changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/file-upload-input-for/file-upload-input-for.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A material design file upload queue component.\n */\n\n\nlet FileUploadInputForDirective = /*#__PURE__*/(() => {\n  class FileUploadInputForDirective {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n      this.element = element;\n      this._queue = null;\n      this.onFileSelected = new EventEmitter();\n      this._element = this.element.nativeElement;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fileUploadQueue(value) {\n      if (value) {\n        this._queue = value;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onChange() {\n      /** @type {?} */\n      let files = this.element.nativeElement.files;\n      this.onFileSelected.emit(files);\n\n      for (var i = 0; i < files.length; i++) {\n        this._queue.add(files[i]);\n      }\n\n      this.element.nativeElement.value = \"\";\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onDrop(event) {\n      /** @type {?} */\n      let files = event.dataTransfer.files;\n      this.onFileSelected.emit(files);\n\n      for (var i = 0; i < files.length; i++) {\n        this._queue.add(files[i]);\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      this.element.nativeElement.value = \"\";\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onDropOver(event) {\n      event.preventDefault();\n    }\n\n  }\n\n  FileUploadInputForDirective.ɵfac = function FileUploadInputForDirective_Factory(t) {\n    return new (t || FileUploadInputForDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  FileUploadInputForDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FileUploadInputForDirective,\n    selectors: [[\"input\", \"fileUploadInputFor\", \"\"], [\"div\", \"fileUploadInputFor\", \"\"]],\n    hostBindings: function FileUploadInputForDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function FileUploadInputForDirective_change_HostBindingHandler() {\n          return ctx.onChange();\n        })(\"drop\", function FileUploadInputForDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        })(\"dragover\", function FileUploadInputForDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDropOver($event);\n        });\n      }\n    },\n    inputs: {\n      fileUploadQueue: [\"fileUploadInputFor\", \"fileUploadQueue\"]\n    },\n    outputs: {\n      onFileSelected: \"onFileSelected\"\n    }\n  });\n  /** @nocollapse */\n\n  return FileUploadInputForDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FileUploadInputForDirective.prototype._queue;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FileUploadInputForDirective.prototype._element;\n  /** @type {?} */\n\n  FileUploadInputForDirective.prototype.onFileSelected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  FileUploadInputForDirective.prototype.element;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/mat-file-upload.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatFileUploadModule = /*#__PURE__*/(() => {\n  class MatFileUploadModule {}\n\n  MatFileUploadModule.ɵfac = function MatFileUploadModule_Factory(t) {\n    return new (t || MatFileUploadModule)();\n  };\n\n  MatFileUploadModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatFileUploadModule\n  });\n  MatFileUploadModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatProgressBarModule, MatCardModule, MatButtonModule, MatIconModule, HttpClientModule, CommonModule]]\n  });\n  return MatFileUploadModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFileUploadModule, {\n    declarations: function () {\n      return [BytesPipe, MatFileUploadQueueComponent, MatFileUploadComponent, FileUploadInputForDirective];\n    },\n    imports: function () {\n      return [MatProgressBarModule, MatCardModule, MatButtonModule, MatIconModule, HttpClientModule, CommonModule];\n    },\n    exports: function () {\n      return [BytesPipe, MatFileUploadQueueComponent, MatFileUploadComponent, FileUploadInputForDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: projects.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-material-fileupload.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FileUploadInputForDirective, MatFileUploadComponent, MatFileUploadModule, MatFileUploadQueueComponent, BytesPipe as ɵa, MatFileUploadQueueService as ɵb }; //# sourceMappingURL=angular-material-fileupload.js.map","map":null,"metadata":{},"sourceType":"module"}