{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAuthChangePasswordPut()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthChangePasswordPut$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AuthService.ApiAuthChangePasswordPutPath, 'put');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAuthChangePasswordPut$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthChangePasswordPut(params) {\n      return this.apiAuthChangePasswordPut$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAuthRegisterPost$Plain()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthRegisterPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AuthService.ApiAuthRegisterPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAuthRegisterPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthRegisterPost$Plain(params) {\n      return this.apiAuthRegisterPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAuthRegisterPost$Json()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthRegisterPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AuthService.ApiAuthRegisterPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAuthRegisterPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthRegisterPost$Json(params) {\n      return this.apiAuthRegisterPost$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAuthLoginPost$Plain()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthLoginPost$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AuthService.ApiAuthLoginPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAuthLoginPost$Plain$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthLoginPost$Plain(params) {\n      return this.apiAuthLoginPost$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAuthLoginPost$Json()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthLoginPost$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AuthService.ApiAuthLoginPostPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAuthLoginPost$Json$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    apiAuthLoginPost$Json(params) {\n      return this.apiAuthLoginPost$Json$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation apiAuthChangePasswordPut\r\n   */\n  AuthService.ApiAuthChangePasswordPutPath = '/api/Auth/change-password';\n  /**\r\n   * Path part for operation apiAuthRegisterPost\r\n   */\n\n  AuthService.ApiAuthRegisterPostPath = '/api/Auth/register';\n  /**\r\n   * Path part for operation apiAuthLoginPost\r\n   */\n\n  AuthService.ApiAuthLoginPostPath = '/api/Auth/login';\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}