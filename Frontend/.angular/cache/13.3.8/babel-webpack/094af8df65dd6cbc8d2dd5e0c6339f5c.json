{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/_helpers/snackbar-helper.service\";\nimport * as i3 from \"src/app/api/services\";\nimport * as i4 from \"@angular/material/divider\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"ng-image-slider\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/button\";\n\nfunction NewBidComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Required field \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let NewBidComponent = /*#__PURE__*/(() => {\n  class NewBidComponent {\n    constructor(itemID, dialog, snackbarHelper, bidService, pictureService, itemService) {\n      this.itemID = itemID;\n      this.dialog = dialog;\n      this.snackbarHelper = snackbarHelper;\n      this.bidService = bidService;\n      this.pictureService = pictureService;\n      this.itemService = itemService;\n      this.bidReq = {};\n      this.imageIds = [];\n      this.itemResponse = {};\n      this.imagesLinks = [];\n      this.imageObject = [];\n    }\n\n    ngOnInit() {\n      this.getImageIds();\n    }\n\n    getImageIds() {\n      this.getItem().subscribe(res => {\n        this.imageIds = res.gallery;\n        this.imageIds.forEach(value => {\n          this.imagesLinks.push('https://api.vhealth.me/api/Pictures/show/' + value);\n        });\n        this.imagesLinks.forEach(imageLink => {\n          this.imageObject.push({\n            image: imageLink,\n            thumbImage: imageLink,\n            title: ''\n          });\n        });\n      });\n    }\n\n    submit() {\n      this.bidReq.itemId = this.itemID;\n      this.bidService.apiBidsPostPost$Json({\n        body: this.bidReq\n      }).subscribe(response => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        this.dialog.closeAll();\n        location.reload();\n      }, e => {\n        this.snackbarHelper.openSnackbar('Error upload entry', 'bg-danger');\n        this.dialog.closeAll();\n      });\n    }\n\n    getItem() {\n      return this.itemService.apiClientItemGetItemByIdIdGet$Json({\n        id: this.itemID\n      });\n    }\n\n  }\n\n  NewBidComponent.ɵfac = function NewBidComponent_Factory(t) {\n    return new (t || NewBidComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.SnackbarHelperService), i0.ɵɵdirectiveInject(i3.BidsService), i0.ɵɵdirectiveInject(i3.PicturesService), i0.ɵɵdirectiveInject(i3.ClientItemService));\n  };\n\n  NewBidComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NewBidComponent,\n    selectors: [[\"app-new-bid\"]],\n    decls: 22,\n    vars: 6,\n    consts: [[\"mat-dialog-content\", \"\"], [\"id\", \"usersForm\"], [\"usersForm\", \"ngForm\"], [\"slideImage\", \"1\", 3, \"images\", \"infinite\", \"autoSlide\"], [\"nav\", \"\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"type\", \"number\", \"name\", \"bidPrice\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"bidPrice\", \"ngModel\"], [4, \"ngIf\"], [\"mat-dialog-actions\", \"\", \"align\", \"end\", 1, \"pt-3\"], [\"mat-stroked-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", \"color\", \"primary\", 3, \"disabled\", \"click\"]],\n    template: function NewBidComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"mat-divider\")(1, \"br\");\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1, 2);\n        i0.ɵɵelement(5, \"ng-image-slider\", 3, 4)(7, \"br\")(8, \"br\");\n        i0.ɵɵelementStart(9, \"mat-form-field\", 5)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Bid price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 6, 7);\n        i0.ɵɵlistener(\"ngModelChange\", function NewBidComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.bidReq.bidPrice = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, NewBidComponent_mat_error_14_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 9)(16, \"button\", 10);\n        i0.ɵɵtext(17, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function NewBidComponent_Template_button_click_18_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtext(19, \" Bid \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"br\")(21, \"br\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(4);\n\n        const _r2 = i0.ɵɵreference(13);\n\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"images\", ctx.imageObject)(\"infinite\", false)(\"autoSlide\", 1);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.bidReq.bidPrice);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (_r2.dirty || _r2.touched) && _r2.errors && _r2.errors.required);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !_r0.form.valid);\n      }\n    },\n    directives: [i4.MatDivider, i1.MatDialogContent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.NgForm, i6.NgImageSliderComponent, i7.MatFormField, i7.MatLabel, i8.MatInput, i5.NumberValueAccessor, i5.DefaultValueAccessor, i5.RequiredValidator, i5.NgControlStatus, i5.NgModel, i9.NgIf, i7.MatError, i1.MatDialogActions, i10.MatButton, i1.MatDialogClose],\n    styles: [\"\"]\n  });\n  return NewBidComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}