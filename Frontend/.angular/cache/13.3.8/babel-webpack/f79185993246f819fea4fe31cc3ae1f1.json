{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let AdminUserService = /*#__PURE__*/(() => {\n  class AdminUserService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminUserGetListNrGet$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserGetListNrGet$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminUserService.ApiAdminUserGetListNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminUserGetListNrGet$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserGetListNrGet$Plain(params) {\n      return this.apiAdminUserGetListNrGet$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminUserGetListNrGet$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserGetListNrGet$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminUserService.ApiAdminUserGetListNrGetPath, 'get');\n\n      if (params) {\n        rb.path('nr', params.nr, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminUserGetListNrGet$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserGetListNrGet$Json(params) {\n      return this.apiAdminUserGetListNrGet$Json$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminUserBanUserIdDelete$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserBanUserIdDelete$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminUserService.ApiAdminUserBanUserIdDeletePath, 'delete');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminUserBanUserIdDelete$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserBanUserIdDelete$Plain(params) {\n      return this.apiAdminUserBanUserIdDelete$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `apiAdminUserBanUserIdDelete$Json()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserBanUserIdDelete$Json$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, AdminUserService.ApiAdminUserBanUserIdDeletePath, 'delete');\n\n      if (params) {\n        rb.path('id', params.id, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `apiAdminUserBanUserIdDelete$Json$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    apiAdminUserBanUserIdDelete$Json(params) {\n      return this.apiAdminUserBanUserIdDelete$Json$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation apiAdminUserGetListNrGet\r\n   */\n  AdminUserService.ApiAdminUserGetListNrGetPath = '/api/AdminUser/get-list/{nr}';\n  /**\r\n   * Path part for operation apiAdminUserBanUserIdDelete\r\n   */\n\n  AdminUserService.ApiAdminUserBanUserIdDeletePath = '/api/AdminUser/ban-user/{id}';\n\n  AdminUserService.ɵfac = function AdminUserService_Factory(t) {\n    return new (t || AdminUserService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AdminUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminUserService,\n    factory: AdminUserService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminUserService;\n})();","map":null,"metadata":{},"sourceType":"module"}