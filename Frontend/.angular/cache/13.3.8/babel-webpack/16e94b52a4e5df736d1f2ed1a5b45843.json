{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../_services/login.service\";\nimport * as i3 from \"../api/services\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    // TODO: Add authService\n    constructor(router, loginService, authService) {\n      this.router = router;\n      this.loginService = loginService;\n      this.authService = authService;\n      this.refreshTokenInProgress = false;\n      this.tokenRefreshedSource = new Subject();\n      this.tokenRefreshed$ = this.tokenRefreshedSource.asObservable();\n    }\n\n    intercept(request, next) {\n      var obs = new Subject();\n      request = this.addAuthHeader(request);\n      next.handle(request).subscribe(evt => {\n        obs.next(evt);\n      }, error => {\n        if (error.status == 401) {\n          if (error.url.indexOf('Auth') >= 0 && request.method == 'PUT') {\n            this.onUnauthorized();\n            obs.error(error);\n            return;\n          }\n\n          this.refreshToken().subscribe(() => {\n            request = this.addAuthHeader(request);\n            next.handle(request).subscribe(re => obs.next(re), err => {\n              this.onUnauthorized();\n              obs.error(err);\n            });\n          }, e => {\n            obs.error(e);\n          });\n        } else if (error.status == 403) {\n          this.onForbidden();\n          obs.error(error);\n        } else {\n          obs.error(error);\n        }\n      });\n      return obs.asObservable();\n    }\n\n    addAuthHeader(request) {\n      const authHeader = this.loginService.getToken();\n\n      if (authHeader && request.url.indexOf('Auth') < 0) {\n        return request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + authHeader\n          }\n        });\n      }\n\n      return request;\n    }\n\n    tokenExists() {\n      const token = this.loginService.getToken();\n      return token !== null && token !== undefined && token !== '';\n    }\n\n    addCacheHeaders(request) {\n      return request.clone({\n        setHeaders: {\n          'Cache-Control': 'no-cache',\n          Pragma: 'no-cache',\n          Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n          'If-Modified-Since': '0'\n        }\n      });\n    }\n\n    refreshToken() {\n      if (this.refreshTokenInProgress) {\n        return new Observable(observer => {\n          this.tokenRefreshed$.subscribe(() => {\n            observer.next();\n            observer.complete();\n          });\n        });\n      } else {\n        //this.refreshTokenInProgress = true;\n        this.router.navigateByUrl(\"/login\"); // TODO: Add auth service\n        // return this.authService.putApiAuth({ token: this.loginService.getToken() || '' }).pipe(\n        //   tap((evt) => {\n        //     this.refreshTokenInProgress = false;\n        //     this.tokenRefreshedSource.next();\n        //   })\n        // );\n      }\n    }\n\n    onUnauthorized() {\n      localStorage.clear();\n      this.router.navigateByUrl('/login');\n    }\n\n    onForbidden() {\n      alert(\"Please stop hacking your way into places where you shouldn't be ok? Thanks\");\n      this.onUnauthorized();\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}